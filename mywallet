#!/bin/sh
# 
# The compilation of software known as "mywallet" is distributed under the
# following terms:
# 
# Copyright (c) 2013 Markiyan Kushnir. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.


WALLETFILE=$HOME/.mywallet
TMP=$HOME/.mywallet.tmp

usage() {
    echo "Usage: `basename $0` [ -y ] [ add | show | get | del | dump | export ]"
    exit
}


die() {
    echo $1
    cleanup
    exit;
}


cleanup() {
    rm -f $TMP
}


mytrap() {
    cleanup
    exit 0;
}


_dec_v1() {
    local _key _salt _data
    _key=$1
    _salt=$2
    _data=$3
    echo -n ${_data} | ( /usr/local/bin/openssl enc -d -rc4 -a -A -pass fd:4 -salt 4<<EOP
${_key}
EOP
) | sed -e "s/${_salt}//"
}


_dec_v2() {
    local _key _salt _data
    _key=$1
    _salt=$2
    _data=$3
    echo -n ${_data} | ( /usr/bin/openssl enc -d -rc4 -a -A -pass fd:4 -salt 2>/dev/null 4<<EOP
${_key}
EOP
) | sed -e "s/${_salt}//"
}


_dec_v3() {
    local _key _salt _data
    _key=$1
    _salt=$2
    _data=$3
    echo -n ${_data} | ( /usr/bin/openssl enc -pbkdf2 -d -rc4 -a -A -pass fd:4 -salt 4<<EOP
${_key}
EOP
) | sed -e "s/${_salt}//"
}


dump() {
    local _version _key _domain _salt _data _ddata
    _version=$1
    _key=$2
    _domain=$3
    _salt=$4
    _data=$5

    if test "${_version}" = 1
    then
        _ddata=`_dec_v1 ${_key} ${_salt} ${_data}`
    elif test "${_version}" = 2
    then
        _ddata=`_dec_v2 ${_key} ${_salt} ${_data}`
    else
        _ddata=`_dec_v3 ${_key} ${_salt} ${_data}`
    fi
    echo "Entry: ${_version} ${_domain} ${_salt} ${_ddata}"
}


dec() {
    local _version _domain _salt _data _key _ddata
    _version=$1
    _domain=$2
    _salt=$3
    _data=$4
    stty -echo
    read -p "Key: " _key
    stty echo
    echo
    if test "${_version}" = 1
    then
        _ddata=`_dec_v1 ${_key} ${_salt} ${_data}`
    elif test "${_version}" = 2
    then
        _ddata=`_dec_v2 ${_key} ${_salt} ${_data}`
    else
        _ddata=`_dec_v3 ${_key} ${_salt} ${_data}`
    fi
    echo "Data: ${_ddata}"
}


enc() {
    local _domain _key _data _encdata _old _override _salt
    _domain=$1
    _key=$2
    _data=$3
    _old="`grep \"^[0-9][0-9]* ${_domain} \" $WALLETFILE`"
    _override=0
    if test -z "${_assumeyes}"
    then
        if test -n "${_old}"
        then
            echo
            cat <<EOD
    ${_old}
EOD

            echo
            read -p "Override? [] " _answer
            case ${_answer} in
                [Yy][Ee][Ss])
                    _override=1
                ;;

                [Nn][Oo])
                    read -p "Confirm duplicate addition? [] " _answer
                    case ${_answer} in
                        [Yy][Ee][Ss])
                            _override=0
                        ;;

                        [Nn][Oo])
                            echo "No changes."
                            return;
                        ;;

                        *)
                            die "Sould be yes or no. No changes."
                        ;;
                    esac
                ;;

                *)
                    die "Sould be yes or no. No changes."
                ;;

            esac
        fi
    else
        _override=1
    fi

    if test ${_override} -eq 1
    then
        grep -v "^${_domain} " $WALLETFILE > $TMP
    else
        cat $WALLETFILE > $TMP
    fi
    _salt="`/usr/bin/openssl rand -hex 8`"
    _encdata="${_version} ${_domain} ${_salt} `echo -n \"${_salt}${_data}\" | ( /usr/bin/openssl enc -pbkdf2 -e -rc4 -a -A -pass fd:4 -salt 4<<EOP
${_key}
EOP
)`"
    echo ${_encdata} >> $TMP
    mv $TMP $WALLETFILE
    chmod 600 $WALLETFILE
}


_enc() {
    local _domain _key _data _encdata _salt
    _domain=$1
    _key=$2
    _data=$3
    _salt="`/usr/bin/openssl rand -hex 8`"
    _encdata="${_version} ${_domain} ${_salt} `echo -n \"${_salt}${_data}\" | ( /usr/bin/openssl enc -pbkdf2 -e -rc4 -a -A -pass fd:4 -salt 4<<EOP
${_key}
EOP
)`"
    echo ${_encdata}
}


_export() {
    local _inversion _key _domain _salt _data _ddata
    _inversion=$1
    _key=$2
    _domain=$3
    _salt=$4
    _data=$5

    if test "${_inversion}" = 1
    then
        _ddata=`_dec_v1 ${_key} ${_salt} ${_data}`
    elif test "${_inversion}" = 2
    then
        _ddata=`_dec_v2 ${_key} ${_salt} ${_data}`
    else
        _ddata=`_dec_v3 ${_key} ${_salt} ${_data}`
    fi
    _enc ${_domain} ${_key} ${_ddata}
}


#
# main
#

trap  mytrap SIGINT SIGTERM EXIT

uname_s=`uname -s`
if test "$uname_s" != 'FreeBSD'
then
    die "Not currently supported: $uname_s"
fi


if ! test -e $WALLETFILE
then
    touch $WALLETFILE && chmod 600 $WALLETFILE
else
    if ! test -f $WALLETFILE
    then
        die "Not a file: $WALLETFILE"
    fi
    if ! test "`stat -f '%p' $WALLETFILE`" = "100600"
    then
        die "Invalid mode on $WALLETFILE"
    fi
fi

_version=3
_domain=
_key=
_data=
_assumeyes=

args="`getopt 'y' $*`"
if test $? -ne 0
then
    usage
fi
set -- $args
for i
do
    case "$i" in
        -y)
            shift
            _assumeyes=yes
        ;;

        --)
            shift;;

        add)
            read -p "Domain: " _domain
            stty -echo
            read -p "Key: " _key
            stty echo
            echo
            stty -echo
            read -p "Data: " _data
            stty echo
            echo
            test -n "${_domain}" -a -n "${_key}" -a -n "${_data}" \
                || die "None of input should be empty."
            enc "$_domain" "$_key" "$_data"
        ;;

        show)
            read -p "Domain: [] " _domain
            grep "^[0-9][0-9]* ${_domain}" $WALLETFILE | awk '{print $2;}' | sort
        ;;

        get)
            read -p "Domain: [] " _answer
            (
                while read _version _domain _salt _data <&3
                do
                    if test "${_answer}" = "${_domain}"
                    then
                        dec ${_version} "$_domain" "$_salt" "$_data" | cat -v
                    fi
                done
            ) 3< $WALLETFILE
        ;;

        del)
            read -p "Domain: " _domain
            if grep "^[123] ${_domain} " $WALLETFILE
            then
                read -p "Delete? [No] " _answer
                case ${_answer} in
                    [Yy][Ee][Ss])
                        grep -v "^[123] ${_domain} " $WALLETFILE > $TMP
                        mv $TMP $WALLETFILE
                        chmod 600 $WALLETFILE
                    ;;
                    *)
                        echo "Not deleted."
                    ;;
                esac
            fi
        ;;

        dump)
            stty -echo
            read -p "Key: " _key
            stty echo
            (
                while read _version _domain _salt _data <&3
                do
                    dump ${_version} ${_key} ${_domain} ${_salt} ${_data}
                done
            ) 3< $WALLETFILE
        ;;

        export)
            read -p "File to export: " _fname
            stty -echo
            read -p "Key: " _key
            stty echo
            truncate -s0 ${_fname}
            _assumeyes=yes
            (
                while read _inversion _domain _salt _data <&3
                do
                    _export ${_inversion} ${_key} ${_domain} ${_salt} ${_data} >>${_fname}
                done
            ) 3< $WALLETFILE
        ;;

        *)
            usage

    esac
done

cleanup
